// This file was auto-generated by Fern from our API Definition.

package reports

import (
	context "context"
	api "github.com/wepala/quickbooks-go/api"
	core "github.com/wepala/quickbooks-go/api/core"
	option "github.com/wepala/quickbooks-go/api/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Report - Account list detail
// Method : GET
//
// The information below provides a reference on how to access the account list detail report from the QuickBooks Online Report Service.
func (c *Client) ReportAccountlist(
	ctx context.Context,
	companyid string,
	request *api.ReportAccountlistRequest,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/AccountList", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}

// Report - AgedPayable aging detail
// Method : GET
//
// The information below provides a reference on how to access the AP Aging summary report from the QuickBooks Online Report Service.
func (c *Client) ReportAgedpayabledetail(
	ctx context.Context,
	companyid string,
	request *api.ReportAgedpayabledetailRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/AgedPayableDetail", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - AgedPayable aging summary
// Method : GET
//
// The information below provides a reference on how to access the AP Aging summary report from the QuickBooks Online Report Service.
func (c *Client) ReportAgedpayables(
	ctx context.Context,
	companyid string,
	request *api.ReportAgedpayablesRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/AgedPayables", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - AgedReceivableDetail aging detail
// Method : GET
//
// The information below provides a reference on how to access the AR Aging Detail report from the QuickBooks Online Report Service.
func (c *Client) ReportAgedreceivabledetail(
	ctx context.Context,
	companyid string,
	request *api.ReportAgedreceivabledetailRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/AgedReceivableDetail", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - AgedReceivable aging summary
// Method : GET
//
// The information below provides a reference on how to access the AR Aging Summary report from the QuickBooks Online Report Service.
func (c *Client) ReportAgedreceivables(
	ctx context.Context,
	companyid string,
	request *api.ReportAgedreceivablesRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/AgedReceivables", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - BalanceSheet
// Method : GET
//
// The information below provides a reference on how to query the Balance Sheet report from the QuickBooks Online Report Service.
func (c *Client) ReportBalancesheet(
	ctx context.Context,
	companyid string,
	request *api.ReportBalancesheetRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/BalanceSheet", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - CashFlow
// Method : GET
//
// The information below provides a reference on how to access the cash flow report from the QuickBooks Online Report Service.
func (c *Client) ReportCashflow(
	ctx context.Context,
	companyid string,
	request *api.ReportCashflowRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/CashFlow", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - CashSales
// Method : GET
func (c *Client) ReportCashsales(
	ctx context.Context,
	companyid string,
	request *api.ReportCashsalesRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/ClassSales", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - CustomerBalance
// Method : GET
func (c *Client) ReportCustomerbalance(
	ctx context.Context,
	companyid string,
	request *api.ReportCustomerbalanceRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/CustomerBalance", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - CustomerBalance Detail
// Method : GET
//
// The information below provides a reference on how to access the Customer Balance Detail report from the QuickBooks Online Report Service.
func (c *Client) ReportCustomerbalancedetail(
	ctx context.Context,
	companyid string,
	request *api.ReportCustomerbalancedetailRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/CustomerBalanceDetail", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Customer Income
// Method : GET
func (c *Client) ReportCustomerincome(
	ctx context.Context,
	companyid string,
	request *api.ReportCustomerincomeRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/CustomerIncome", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Customer Sales
// Method : GET
func (c *Client) ReportCustomersales(
	ctx context.Context,
	companyid string,
	request *api.ReportCustomersalesRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/CustomerSales", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Department Sales
// Method : GET
func (c *Client) ReportDepartmentsales(
	ctx context.Context,
	companyid string,
	request *api.ReportDepartmentsalesRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/DepartmentSales", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - General Ledger
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/general%20ledger
func (c *Client) ReportGeneralledger(
	ctx context.Context,
	companyid string,
	request *api.ReportGeneralledgerRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/GeneralLedger", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Inventory Valuation Summary
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/inventory%20valuation
func (c *Client) ReportInventoryvaluationsummary(
	ctx context.Context,
	companyid string,
	request *api.ReportInventoryvaluationsummaryRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/InventoryValuationSummary", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Item Sales
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/sales%20by%20product
func (c *Client) ReportItemsales(
	ctx context.Context,
	companyid string,
	request *api.ReportItemsalesRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/ItemSales", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Profit and Loss
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/profit%20and%20loss
func (c *Client) ReportProfitandloss(
	ctx context.Context,
	companyid string,
	request *api.ReportProfitandlossRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/ProfitAndLoss", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Profit and Loss Detail
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/profit%20and%20loss%20detail
func (c *Client) ReportProfitandlossdetail(
	ctx context.Context,
	companyid string,
	request *api.ReportProfitandlossdetailRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/ProfitAndLossDetail", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Trial Balance
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/trial%20balance
func (c *Client) ReportTrialbalance(
	ctx context.Context,
	companyid string,
	request *api.ReportTrialbalanceRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/TrialBalance", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Trial List
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/transaction%20list
func (c *Client) ReportTransactionlist(
	ctx context.Context,
	companyid string,
	request *api.ReportTransactionlistRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/TransactionList", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Vendor Balance
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/vendor%20balance
func (c *Client) ReportVendorbalance(
	ctx context.Context,
	companyid string,
	request *api.ReportVendorbalanceRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/VendorBalance", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Vendor Balance Detail
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/vendor%20balance%20detail
func (c *Client) ReportVendorbalancedetail(
	ctx context.Context,
	companyid string,
	request *api.ReportVendorbalancedetailRequest,
	opts ...option.RequestOption,
) (*api.Report, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/VendorBalanceDetail", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *api.Report
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Report - Vendor Expense
// Method : GET
//
// Docs - https://developer.intuit.com/docs/api/accounting/expenses%20by%20vendor
func (c *Client) ReportVendorexpense(
	ctx context.Context,
	companyid string,
	request *api.ReportVendorexpenseRequest,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://quickbooks.api.intuit.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v3/company/%v/reports/VendorExpenses", companyid)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}
