// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/wepala/quickbooks-go/api/core"
)

type BillpaymentCreateRequest struct {
	Operation    *string                               `json:"-" url:"operation,omitempty"`
	CheckPayment *BillpaymentCreateRequestCheckPayment `json:"CheckPayment,omitempty" url:"-"`
	Line         []*BillpaymentCreateRequestLineItem   `json:"Line,omitempty" url:"-"`
	PayType      *string                               `json:"PayType,omitempty" url:"-"`
	PrivateNote  *string                               `json:"PrivateNote,omitempty" url:"-"`
	TotalAmt     *float64                              `json:"TotalAmt,omitempty" url:"-"`
	VendorRef    *BillpaymentCreateRequestVendorRef    `json:"VendorRef,omitempty" url:"-"`
}

type BillpaymentCreateRequestCheckPayment struct {
	BankAccountRef *BillpaymentCreateRequestCheckPaymentBankAccountRef `json:"BankAccountRef,omitempty" url:"BankAccountRef,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillpaymentCreateRequestCheckPayment) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillpaymentCreateRequestCheckPayment) UnmarshalJSON(data []byte) error {
	type unmarshaler BillpaymentCreateRequestCheckPayment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillpaymentCreateRequestCheckPayment(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillpaymentCreateRequestCheckPayment) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillpaymentCreateRequestLineItem struct {
	Amount    *float64                                         `json:"Amount,omitempty" url:"Amount,omitempty"`
	LinkedTxn []*BillpaymentCreateRequestLineItemLinkedTxnItem `json:"LinkedTxn,omitempty" url:"LinkedTxn,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillpaymentCreateRequestLineItem) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillpaymentCreateRequestLineItem) UnmarshalJSON(data []byte) error {
	type unmarshaler BillpaymentCreateRequestLineItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillpaymentCreateRequestLineItem(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillpaymentCreateRequestLineItem) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillpaymentCreateRequestVendorRef struct {
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillpaymentCreateRequestVendorRef) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillpaymentCreateRequestVendorRef) UnmarshalJSON(data []byte) error {
	type unmarshaler BillpaymentCreateRequestVendorRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillpaymentCreateRequestVendorRef(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillpaymentCreateRequestVendorRef) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}
